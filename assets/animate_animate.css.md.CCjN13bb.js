import{j as k,k as f,D as q,c as m,l as u,a as l,I as p,w as o,a5 as C,a4 as r,o as d,F as P,E as S,t as A}from"./chunks/framework.B3h3aO-h.js";const w=r(`<h1 id="animate-css" tabindex="-1">Animate.css <a class="header-anchor" href="#animate-css" aria-label="Permalink to &quot;Animate.css&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm add animate.css</span></span></code></pre></div><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> import &#39;animate.css&#39;;</span></span>
<span class="line"><span> &lt;h1 class=&quot;animate__animated animate__bounce&quot;&gt;An animated element&lt;/h1&gt;</span></span></code></pre></div><h1 class="animate__animated animate__bounce">An animated element</h1><p>原来真的如此简单</p><h2 id="使用-keyframes" tabindex="-1">使用@keyframes <a class="header-anchor" href="#使用-keyframes" aria-label="Permalink to &quot;使用@keyframes&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;h1 class=&quot;my-element&quot;&gt;An animated custom element&lt;/h1&gt;</span></span>
<span class="line"><span>.my-element{</span></span>
<span class="line"><span>  display: inline-block;</span></span>
<span class="line"><span>  margin: 0 0.5rem;</span></span>
<span class="line"><span>  animation: bounce; /* 动画名 */</span></span>
<span class="line"><span>  animation-duration: 2s; /* don&#39;t forget to set a duration! */</span></span>
<span class="line"><span>}</span></span></code></pre></div><h1 class="my-element">An animated custom element - my-element</h1><h2 id="使用自定义" tabindex="-1">使用自定义 <a class="header-anchor" href="#使用自定义" aria-label="Permalink to &quot;使用自定义&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/* 局部设置 */</span></span>
<span class="line"><span>.animate__animated.animate__bounce {</span></span>
<span class="line"><span>  --animate-duration: 2s;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* 全局设置 */</span></span>
<span class="line"><span>:root {</span></span>
<span class="line"><span>  --animate-duration: 800ms;</span></span>
<span class="line"><span>  --animate-delay: 0.9s;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 通过js设置css变量属性 */</span></span>
<span class="line"><span>document.documentElement.style.setProperty(&#39;--animate-duration&#39;, &#39;2s&#39;);</span></span></code></pre></div><h2 id="延迟classes" tabindex="-1">延迟classes <a class="header-anchor" href="#延迟classes" aria-label="Permalink to &quot;延迟classes&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;animate__animated animate__bounce animate__delay-2s&quot;&gt;Example&lt;/div&gt;</span></span></code></pre></div><div class="animate__animated animate__bounce animate__delay-2s">Example</div><h2 id="slow-slower-fast-and-faster-classes" tabindex="-1">Slow, slower, fast, and Faster classes <a class="header-anchor" href="#slow-slower-fast-and-faster-classes" aria-label="Permalink to &quot;Slow, slower, fast, and Faster classes&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>animate__slow	2s</span></span>
<span class="line"><span>animate__slower	3s</span></span>
<span class="line"><span>animate__fast	800ms</span></span>
<span class="line"><span>animate__faster	500ms</span></span></code></pre></div><div class="animate__animated animate__bounce animate__faster">Example</div><h2 id="repeating" tabindex="-1">Repeating <a class="header-anchor" href="#repeating" aria-label="Permalink to &quot;Repeating&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>animate__repeat-1	1</span></span>
<span class="line"><span>animate__repeat-2	2</span></span>
<span class="line"><span>animate__repeat-3	3</span></span>
<span class="line"><span>animate__infinite	infinite</span></span></code></pre></div><div class="animate__animated animate__bounce animate__repeat-2">Example</div><h2 id="与javascript一起使用" tabindex="-1">与Javascript一起使用 <a class="header-anchor" href="#与javascript一起使用" aria-label="Permalink to &quot;与Javascript一起使用&quot;">​</a></h2><p>你可以通过监听动画事件来监听</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const element = document.querySelector(&#39;.my-element&#39;);</span></span>
<span class="line"><span>console.log(element)</span></span>
<span class="line"><span>element.addEventListener(&#39;animationend&#39;, (e) =&gt; {</span></span>
<span class="line"><span>    console.log(123,e)</span></span>
<span class="line"><span>});</span></span></code></pre></div><h2 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h2>`,25),x=r(`<h1 class="my-element1">An animated custom element - my-element1</h1><h1 class="my-element2">An animated custom element - my-element2</h1><h1 class="my-element3">An animated custom element - my-element3</h1><h1 class="my-element4">An animated custom element - my-element4</h1><h1 class="my-element5">An animated custom element - my-element5</h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const animateCSS = (element, animation, prefix = &#39;animate__&#39;) =&gt;</span></span>
<span class="line"><span>  // We create a Promise and return it</span></span>
<span class="line"><span>  new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span>    const animationName = \`\${prefix}\${animation}\`;</span></span>
<span class="line"><span>    const node = document.querySelector(element);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    node.classList.add(\`\${prefix}animated\`, animationName);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // When the animation ends, we clean the classes and resolve the Promise</span></span>
<span class="line"><span>    function handleAnimationEnd(event) {</span></span>
<span class="line"><span>      event.stopPropagation();</span></span>
<span class="line"><span>      node.classList.remove(\`\${prefix}animated\`, animationName);</span></span>
<span class="line"><span>      resolve(&#39;Animation ended&#39;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    node.addEventListener(&#39;animationend&#39;, handleAnimationEnd, {once: true});</span></span>
<span class="line"><span>});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>await animateCSS(&quot;.my-element1&quot;,&#39;bounce&#39;)</span></span>
<span class="line"><span>await animateCSS(&quot;.my-element2&quot;,&#39;flash&#39;)</span></span>
<span class="line"><span>await animateCSS(&quot;.my-element3&quot;,&#39;pulse&#39;)</span></span>
<span class="line"><span>await animateCSS(&quot;.my-element4&quot;,&#39;backOutDown&#39;)</span></span>
<span class="line"><span>await animateCSS(&quot;.my-element5&quot;,&#39;backInUp&#39;)</span></span></code></pre></div><h2 id="结合使用-transition-group" tabindex="-1">结合使用 transition-group <a class="header-anchor" href="#结合使用-transition-group" aria-label="Permalink to &quot;结合使用 transition-group&quot;">​</a></h2><h3 id="例子1" tabindex="-1">例子1 <a class="header-anchor" href="#例子1" aria-label="Permalink to &quot;例子1&quot;">​</a></h3>`,9),T={style:{display:"flex"}},E=r('<h2 id="新学知识点" tabindex="-1">新学知识点 <a class="header-anchor" href="#新学知识点" aria-label="Permalink to &quot;新学知识点&quot;">​</a></h2><hr><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>element.addEventListener(&#39;click&#39;, myClickHandler, { once: true });</span></span></code></pre></div><p>addEventListener第三个参数可以为对象值</p><ul><li>capture：布尔值，表示监听器是否在捕获阶段执行。</li><li>once：布尔值，表示监听器是否仅执行一次。</li><li>passive：布尔值，表示监听器不会调用 preventDefault()</li></ul><hr>',6),I=JSON.parse('{"title":"animate.css","description":"","frontmatter":{"title":"animate.css"},"headers":[],"relativePath":"animate/animate.css.md","filePath":"animate/animate.css.md","lastUpdated":1716041560000}'),D={name:"animate/animate.css.md"},$=Object.assign(D,{setup(N){const t=k(Array(4).fill(0).map((n,s)=>s)),e=(n,s,a="animate__")=>new Promise((i,L)=>{const h=`${a}${s}`,c=document.querySelector(n);c.classList.add(`${a}animated`,h);function b(y){y.stopPropagation(),c.classList.remove(`${a}animated`,h),i("Animation ended")}c.addEventListener("animationend",b,{once:!0})});async function _(){await e(".my-element1","bounce"),await e(".my-element2","flash"),await e(".my-element3","pulse"),await e(".my-element4","backInUp"),await e(".my-element5","backOutDown")}function g(){t.value.push(t.value.length)}function v(){t.value.pop()}return f(()=>{const n=document.querySelector(".my-element");console.log(n),n.addEventListener("animationend",s=>{console.log(123,s)})}),(n,s)=>{const a=q("el-button");return d(),m("div",null,[w,u("p",null,[l("你可以很轻松的对出队列动画 "),p(a,{type:"primary",onClick:_},{default:o(()=>[l("开始动画")]),_:1})]),x,p(a,{type:"primary",onClick:g},{default:o(()=>[l("ADD")]),_:1}),p(a,{type:"success",onClick:v},{default:o(()=>[l("POP")]),_:1}),u("div",T,[p(C,{"enter-active-class":"animate__animated animate__bounceOut","leave-active-class":"animate__animated animate__hinge"},{default:o(()=>[(d(!0),m(P,null,S(t.value,i=>(d(),m("div",{style:{padding:"10px"},class:"item",key:i},A(i),1))),128))]),_:1})]),E])}}});export{I as __pageData,$ as default};
