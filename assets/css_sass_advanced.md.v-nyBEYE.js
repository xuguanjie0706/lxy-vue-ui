import{_ as t,c as a,o as s,a4 as e}from"./chunks/framework.B3h3aO-h.js";const g=JSON.parse('{"title":"Sass进阶篇","description":"","frontmatter":{},"headers":[],"relativePath":"css/sass/advanced.md","filePath":"css/sass/advanced.md","lastUpdated":1717098301000}'),n={name:"css/sass/advanced.md"},l=e(`<h1 id="sass进阶篇" tabindex="-1">Sass进阶篇 <a class="header-anchor" href="#sass进阶篇" aria-label="Permalink to &quot;Sass进阶篇&quot;">​</a></h1><p><a href="https://www.w3school.com.cn/sass/sass_functions_string.asp" target="_blank" rel="noreferrer">sass学习地址</a></p><h2 id="if语句" tabindex="-1">if语句 <a class="header-anchor" href="#if语句" aria-label="Permalink to &quot;if语句&quot;">​</a></h2><p>Sass可以根据条件判断给出特定的样式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.box {</span></span>
<span class="line"><span>	@if 1+1 == 2 {</span></span>
<span class="line"><span>		color: red;</span></span>
<span class="line"><span>	} @else if 1+1 == 3 {</span></span>
<span class="line"><span>		color: blud;</span></span>
<span class="line"><span>	} @else {</span></span>
<span class="line"><span>		color: pink;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="for循环" tabindex="-1">for循环 <a class="header-anchor" href="#for循环" aria-label="Permalink to &quot;for循环&quot;">​</a></h2><p>Sass也支持for循环，有两种语法。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-YNldt" id="tab-sU0NjzQ" checked="checked"><label for="tab-sU0NjzQ">包含结束值</label><input type="radio" name="group-YNldt" id="tab-qqrV1Yh"><label for="tab-qqrV1Yh">不包含结束值</label></div><div class="blocks"><div class="language-@for vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">@for</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@for $i from 1 through 5 {</span></span>
<span class="line"><span>	.col-#{$i} {</span></span>
<span class="line"><span>		width: 50px * $i;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language-@for vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@for</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@for $i from 1 to 5 {</span></span>
<span class="line"><span>	.col-#{$i} {</span></span>
<span class="line"><span>		width: 50px * $i;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div></div></div><h2 id="each循环" tabindex="-1">each循环 <a class="header-anchor" href="#each循环" aria-label="Permalink to &quot;each循环&quot;">​</a></h2><p>遍历一个列表，然后从列表中取出对应值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$icons: success fail warning;</span></span>
<span class="line"><span>@each $i in $icons {</span></span>
<span class="line"><span>	.icon-#{$i} {</span></span>
<span class="line"><span>		background-image: url(../images/icons/#{$i}.png);</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="while循环" tabindex="-1">while循环 <a class="header-anchor" href="#while循环" aria-label="Permalink to &quot;while循环&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$index: 6;</span></span>
<span class="line"><span>@while $index&gt; 0 {</span></span>
<span class="line"><span>    .box-#{$index} {</span></span>
<span class="line"><span>        width: 5px * $index;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    $index: $index - 2;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="用户自定义函数" tabindex="-1">用户自定义函数 <a class="header-anchor" href="#用户自定义函数" aria-label="Permalink to &quot;用户自定义函数&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$index: 6;</span></span>
<span class="line"><span>@function get-color($key) {</span></span>
<span class="line"><span>	@if $key &gt; 5 {</span></span>
<span class="line"><span>		@return #000;</span></span>
<span class="line"><span>	} @else {</span></span>
<span class="line"><span>		@return #fff;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="at-root" tabindex="-1">@at-root <a class="header-anchor" href="#at-root" aria-label="Permalink to &quot;@at-root&quot;">​</a></h2><p>@ at-root指令是一个嵌套规则的集合，它能够在文档的根节点创建样式块</p><h2 id="字符串函数" tabindex="-1">字符串函数 <a class="header-anchor" href="#字符串函数" aria-label="Permalink to &quot;字符串函数&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:left;">str-slice</td><td>从字符串中提取字符；从 start 开始到 end 结束，并返回切片。</td><td>str-slice(&quot;Hello world!&quot;, 2, 5) result:ello</td></tr><tr><td style="text-align:left;">str-length(string)</td><td>返回字符串的长度（以字符计）。</td><td>str-length(&quot;Hello world!&quot;) result:12</td></tr><tr><td style="text-align:left;">str-index</td><td>返回子字符串在字符串中第一次出现的索引。</td><td>str-index(&quot;Hello world!&quot;, &quot;H&quot;) result 1</td></tr><tr><td style="text-align:left;">quote</td><td>将引号添加到字符串，并返回结果。</td><td>quote(Hello world!) result &quot;Hello world!&quot;</td></tr><tr><td style="text-align:left;">str-insert(string, insert, index)</td><td>返回在指定索引位置插入 insert 的字符串。</td><td>str-insert(&quot;Hello world!&quot;, &quot; wonderful&quot;, 6) result:&quot;Hello wonderful world!&quot;</td></tr><tr><td style="text-align:left;">to-lower-case(string)</td><td>返回转换为小写的字符串副本。</td><td>to-lower-case(&quot;Hello World!&quot;) result:&quot;hello world!&quot;</td></tr><tr><td style="text-align:left;">to-upper-case(string)</td><td>返回转换为大写的字符串副本。</td><td>to-upper-case(&quot;Hello World!&quot;) result:&quot;HELLO WORLD!&quot;</td></tr><tr><td style="text-align:left;">unique-id()</td><td>返回唯一的随机生成的不带引号的字符串。</td><td>unique-id() result:&#39;tyghefnsv&#39;</td></tr><tr><td style="text-align:left;">unquote()</td><td>删除字符串周围的引号（如果有），并返回结果。</td><td>unquote(&quot;Hello world!&quot;) result:Hello world!</td></tr></tbody></table><h2 id="数字函数" tabindex="-1">数字函数 <a class="header-anchor" href="#数字函数" aria-label="Permalink to &quot;数字函数&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:left;">abs</td><td>返回绝对值</td><td>abs(-15 result:15)</td></tr><tr><td style="text-align:left;">ceil</td><td>数字向上舍入</td><td>ceil(15.20 result:15)</td></tr><tr><td style="text-align:left;">comparable</td><td>返回2个数值能否可比较</td><td>comparable(1px,10px) result:true</td></tr><tr><td style="text-align:left;">floor</td><td>将数字向下舍入到最接近的整数。</td><td>floor(15.80) result:15</td></tr><tr><td style="text-align:left;">max</td><td>返回几个数字的最大值。</td><td>max(5, 7, 9, 0, -3, -7) result:9</td></tr><tr><td style="text-align:left;">min</td><td>返回几个数字的最大值。</td><td>max(5, 7, 9, 0, -3, -7) result: -7</td></tr><tr><td style="text-align:left;">percentage</td><td>将数字转换为百分比</td><td>percentage(1.2) result:120</td></tr><tr><td style="text-align:left;">random</td><td>返回 0 到 1 之间的随机数</td><td>random() result:0.45673</td></tr><tr><td style="text-align:left;">random(number)</td><td>返回 1 到 number 之间的随机数</td><td>random(6) result:4</td></tr><tr><td style="text-align:left;">round(number)</td><td>将数字四舍五入到最接近的整数</td><td>round(15.20) result:16</td></tr></tbody></table><h2 id="列表函数" tabindex="-1">列表函数 <a class="header-anchor" href="#列表函数" aria-label="Permalink to &quot;列表函数&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:left;">index(list, value)</td><td>返回列表中值的索引位置。</td><td>index(a b c, b) result: 2</td></tr></tbody></table><h2 id="省函数方法" tabindex="-1">省函数方法 <a class="header-anchor" href="#省函数方法" aria-label="Permalink to &quot;省函数方法&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:left;">inspect($value)</td><td>返回由Sass表示的$value</td><td>inspect(12) Result:12</td></tr></tbody></table>`,25),d=[l];function i(p,r,o,c,h,u){return s(),a("div",null,d)}const f=t(n,[["render",i]]);export{g as __pageData,f as default};
