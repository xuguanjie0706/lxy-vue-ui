import{_ as a,c as e,o as s,a4 as l}from"./chunks/framework.B3h3aO-h.js";const n="/lxy-blog/assets/image.BViiRBUN.png",i="/lxy-blog/assets/image-1.gf6JUQDe.png",t="/lxy-blog/assets/image-2.CwMT4Quw.png",o="/lxy-blog/assets/image-3.CQYIk__v.png",p="/lxy-blog/assets/image-4.DqLoGL1B.png",r="/lxy-blog/assets/image-5.C7WEnWQ8.png",c="/lxy-blog/assets/image-6.DZIfLVWh.png",d="/lxy-blog/assets/image-7.CHL9Lhbe.png",h="/lxy-blog/assets/image-8.D3tSC8hT.png",u="/lxy-blog/assets/image-10.DYUhvIIn.png",x="/lxy-blog/assets/image-9.CgmpCR3O.png",P=JSON.parse('{"title":"Flex 布局","description":"","frontmatter":{},"headers":[],"relativePath":"css/flex/index.md","filePath":"css/flex/index.md","lastUpdated":1717574325000}'),g={name:"css/flex/index.md"},f=l(`<h1 id="flex-布局" tabindex="-1">Flex 布局 <a class="header-anchor" href="#flex-布局" aria-label="Permalink to &quot;Flex 布局&quot;">​</a></h1><p>Flex 是 Flexible Box 的缩写，意思就是“弹性布局”。它的作用就是为盒状模型提供最大的灵活性。<code>任何容器都可以指定为Flex布局</code>。</p><h1 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">​</a></h1><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h2 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-label="Permalink to &quot;flex-direction&quot;">​</a></h2><p>决定主轴方向。<code>flex-direction</code> 有4个值的含义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>	flex-direction: row | row-reverse | column | column-reverse</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>row 主轴水平方向,左起点</li><li>row-reverse 主轴水平方向，右起点</li><li>column 主轴垂直方向，上起点</li><li>column-reverse 主轴垂直方向，下起点</li></ul><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+n+`" alt="alt text"></p><h2 id="flex-wrap" tabindex="-1">flex-wrap <a class="header-anchor" href="#flex-wrap" aria-label="Permalink to &quot;flex-wrap&quot;">​</a></h2><p>默认情况下，所有的项目都排列在一条线上（又称为“轴线“）。<code>flex-wrap</code>属性定义， 如果在一条轴线上排不下，如何换行。</p><p>默认交叉轴是行是等分的，需要设置<code>align-content:flex-start</code>使得cell从上往下排列。如图4</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>	flex-wrap: flex-wrap: nowrap | wrap | wrap-column</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>nowrap： 默认值，不换行</li><li>wrap：自上而下换行</li><li>wrap-reverse：自下而上换行</li></ul><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+i+`" alt="alt text"></p><h2 id="flex-flow" tabindex="-1">flex-flow <a class="header-anchor" href="#flex-flow" aria-label="Permalink to &quot;flex-flow&quot;">​</a></h2><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式。默认值：row nowrap;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container {</span></span>
<span class="line"><span>	flex-flow: &lt;flex-direction&gt; | &lt;flex-wrap&gt;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-label="Permalink to &quot;justify-content&quot;">​</a></h2><p>justify-content属性定义了项目在主轴上的对齐方式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>	justify-content: flex-start | flex-end | center| space-between | space-around</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>flex start: 默认值，主轴的起点对齐</li><li>flex-end： 主轴的终点对齐</li><li>center：居中</li><li>space-between：两端对齐，项目之间的间隔是相等的</li><li>space-around： 每个项目两侧的距离相等，所以项目之间的间距与项目与边框的间距要大</li></ul><h3 id="例子-2" tabindex="-1">例子 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+t+`" alt="alt text"></p><h2 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h2><p><code>align-items</code> 属性定义项目在交叉轴的对齐方式。交叉轴方向高度或者宽度会影响默认效果。如图5第一个cell设置高度后交叉轴未填满</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>    align-items: flex-start |flex-end | center | baseline| stretch</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>flex-start:: 交叉轴的起点对齐</li><li>flex-end: 交叉轴的终对齐</li><li>center：居中</li><li>baseline： 项目的第一行文字基线对齐</li><li>stretch: 默认值， 如果项目未设置高度或者设置高度为auto，将铺满整个容器的高度</li></ul><h3 id="例子-3" tabindex="-1">例子 <a class="header-anchor" href="#例子-3" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+o+`" alt="alt text"></p><h2 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h2><p><code>align-content</code>属性设置了多根轴线的对齐方式.数据与<code>align-items</code>类似。该属性一定要配合<code>flex-wrap:wrap</code>使用，优先级高于<code>align-items</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.container{</span></span>
<span class="line"><span>    align-items: flex-start |flex-end | center | baseline| stretch</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>flex start:: 交叉轴的起点对齐</li><li>flex end: 交叉轴的终对齐</li><li>center：居中</li><li>stretch： 默认值， 如果项目未设置高度或者设置高度为auto，将铺满整个容器的高度</li><li>space-between:与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：每根轴线两侧的间隔都相等。轴线之间的间隔比轴线与边框的间隔大一倍</li><li>stretch：默认值，占满整个容器</li></ul><h3 id="例子-4" tabindex="-1">例子 <a class="header-anchor" href="#例子-4" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+p+`" alt="alt text"></p><h1 id="项目属性" tabindex="-1">项目属性 <a class="header-anchor" href="#项目属性" aria-label="Permalink to &quot;项目属性&quot;">​</a></h1><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h2 id="order" tabindex="-1">order <a class="header-anchor" href="#order" aria-label="Permalink to &quot;order&quot;">​</a></h2><p><code>order</code> 属性定义项目的排列顺序，数值越小，排列越靠前， 默认值为0。图例给第一个item设置了4,所以牌子最后面</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>  order: &lt;number&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="例子-5" tabindex="-1">例子 <a class="header-anchor" href="#例子-5" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+r+`" alt="alt text"></p><h2 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-label="Permalink to &quot;flex-grow&quot;">​</a></h2><p><code>flex-grow</code> 属性定义项目的放大比列。默认为0，即 即使存在剩余空间，也不放大,对多行交叉轴有剩余空间的行有效。</p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>如果一个项目的flex-grow属性为4，其他项目都为1，则前者占据的剩余空间将比其他多4倍。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>  flex-grow: &lt;number&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="例子-6" tabindex="-1">例子 <a class="header-anchor" href="#例子-6" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+c+`" alt="alt text"></p><h2 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h2><p><code>flex-shrink</code>属性定义项目的缩小比例，默认值为1， 如果剩余空间不足，项目将缩小。</p><p>图一代表flex-shrink都为1，如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小</p><p>图二代表第一个flex-shrink为10,其余为1，如果所有项目的flex-shrink属性都为1，其他的flex-shrink 为10，那么后者的缩小比例是前者的10倍</p><p>图二代表第一个flex-shrink为10,第二个为1，第三个为0，如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>  flex-shrink: &lt;number&gt;; /* default 1 */</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="例子-7" tabindex="-1">例子 <a class="header-anchor" href="#例子-7" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+d+`" alt="alt text"></p><h2 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h2><p><code>flex-basis</code>属性定义在分配剩余空间之前， 项目占主轴的空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小,可以代表高度或者是宽度,在flex-direction:row下及可以理解为宽度，但是权重高于width。设置auto后由宽度或者高度决定主轴方向的长度.</p><p>例子中对第一个cell同时设置了<code>width:30px;flex-basis: 55px;</code>,单元格宽度55</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>  flex-basis: &lt;length&gt; | auto; /* default auto */</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="例子-8" tabindex="-1">例子 <a class="header-anchor" href="#例子-8" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+h+'" alt="alt text"></p><h2 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h2><p><code>flex</code>属性是flex-grow flex-shrink flex-basis 的简写，默认值为0 1 auto。后两个属性可选。</p><ul><li>flex:1 代表能放能缩</li><li>flex:none 代表不能放不能缩</li></ul><p>设置了flex:1理论上无法进行换行，因为他既能放大又能缩小。但是你可以通过flex-basic在分配剩余空间之前占据主轴空间</p><h3 id="例子-9" tabindex="-1">例子 <a class="header-anchor" href="#例子-9" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="'+u+`" alt="alt text"></p><h2 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-label="Permalink to &quot;align-self&quot;">​</a></h2><p>属性允许单个项目与其他项目不一样的对齐方式，可覆盖align-items，默认值为auto，表示继承父级的align-items。如果没有父元素，则等同于stretch。对多行交叉轴无效</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="例子-10" tabindex="-1">例子 <a class="header-anchor" href="#例子-10" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p><img src="`+x+'" alt="alt text"></p>',77),b=[f];function m(k,v,q,_,w,y){return s(),e("div",null,b)}const T=a(g,[["render",m]]);export{P as __pageData,T as default};
