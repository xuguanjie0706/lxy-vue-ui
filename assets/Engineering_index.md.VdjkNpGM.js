import{_ as a,c as s,o as n,a4 as e}from"./chunks/framework.B3h3aO-h.js";const m=JSON.parse('{"title":"多仓库管理","description":"","frontmatter":{},"headers":[],"relativePath":"Engineering/index.md","filePath":"Engineering/index.md","lastUpdated":1716016408000}'),p={name:"Engineering/index.md"},t=e(`<h1 id="多仓库管理" tabindex="-1">多仓库管理 <a class="header-anchor" href="#多仓库管理" aria-label="Permalink to &quot;多仓库管理&quot;">​</a></h1><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm init</span></span></code></pre></div><h3 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── pnpm-workspace.yaml</span></span>
<span class="line"><span>├── packages // 存放子项目</span></span></code></pre></div><h3 id="pnpm-workspace-yaml-新增内容" tabindex="-1"><code>pnpm-workspace.yaml</code> 新增内容 <a class="header-anchor" href="#pnpm-workspace-yaml-新增内容" aria-label="Permalink to &quot;\`pnpm-workspace.yaml\` 新增内容&quot;">​</a></h3><div class="language-pnpm-workspace.yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">pnpm-workspace.yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>packages:</span></span>
<span class="line"><span>  # all packages in direct subdirs of packages/</span></span>
<span class="line"><span>  - &#39;packages/*&#39;</span></span>
<span class="line"><span>  # all packages in subdirs of components/</span></span>
<span class="line"><span>  - &#39;components/**&#39;</span></span>
<span class="line"><span>  # exclude packages that are inside test directories</span></span>
<span class="line"><span>  - &#39;!**/test/**&#39;</span></span></code></pre></div><h3 id="脚本设置" tabindex="-1">脚本设置 <a class="header-anchor" href="#脚本设置" aria-label="Permalink to &quot;脚本设置&quot;">​</a></h3><p>当您在项目中使用 pnpm 时，您不希望被其他人意外运行 npm install 或 yarn。 为了防止开发人员使用其他的包管理器，您可以将下面的这个 preinstall 脚本添加到您的 package.json：</p><div class="language-package.json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">package.json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    &quot;preinstall&quot;: &quot;npx -y only-allow pnpm&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="安装-changeset" tabindex="-1">安装 <code>changeset</code> <a class="header-anchor" href="#安装-changeset" aria-label="Permalink to &quot;安装 \`changeset\`&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm i @changesets/cli -Dw</span></span></code></pre></div>`,12),i=[t];function l(c,o,d,r,h,g){return n(),s("div",null,i)}const k=a(p,[["render",l]]);export{m as __pageData,k as default};
