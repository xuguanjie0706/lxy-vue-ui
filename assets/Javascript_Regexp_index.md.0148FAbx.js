import{_ as t,c as a,o as e,a4 as s}from"./chunks/framework.B3h3aO-h.js";const b=JSON.parse('{"title":"正则匹配","description":"","frontmatter":{},"headers":[],"relativePath":"Javascript/Regexp/index.md","filePath":"Javascript/Regexp/index.md","lastUpdated":1716060891000}'),l={name:"Javascript/Regexp/index.md"},n=s(`<h1 id="正则匹配" tabindex="-1">正则匹配 <a class="header-anchor" href="#正则匹配" aria-label="Permalink to &quot;正则匹配&quot;">​</a></h1><p>我真的发现需要匹配的东西太多啦</p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h2 id="单个字符-a或b或c" tabindex="-1">单个字符:a或b或c <a class="header-anchor" href="#单个字符-a或b或c" aria-label="Permalink to &quot;单个字符:a或b或c&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[abc]</span></span></code></pre></div><h2 id="a-b-c以外的单个字符" tabindex="-1">a,b,c以外的单个字符 <a class="header-anchor" href="#a-b-c以外的单个字符" aria-label="Permalink to &quot;a,b,c以外的单个字符&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[^abc]</span></span></code></pre></div><h2 id="字符范围" tabindex="-1">字符范围 <a class="header-anchor" href="#字符范围" aria-label="Permalink to &quot;字符范围&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[a-zA-Z0-9]</span></span></code></pre></div><h2 id="任意字符" tabindex="-1">任意字符 <a class="header-anchor" href="#任意字符" aria-label="Permalink to &quot;任意字符&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span></code></pre></div><h2 id="常用字符" tabindex="-1">常用字符 <a class="header-anchor" href="#常用字符" aria-label="Permalink to &quot;常用字符&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>\\s 空字符</span></span>
<span class="line"><span>\\S 非空字符</span></span>
<span class="line"><span>\\d 数字字符</span></span>
<span class="line"><span>\\D 非数字字符</span></span>
<span class="line"><span>\\w 单词(字母，数字，下划线)</span></span>
<span class="line"><span>\\W 非单词</span></span></code></pre></div><h2 id="限定符" tabindex="-1">限定符 <a class="header-anchor" href="#限定符" aria-label="Permalink to &quot;限定符&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">符号</th><th>作用</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">?</td><td>表示前面的字符可以出现1次或者0次。要么不出现要么出现一次</td><td style="text-align:left;"><code>co? result:co c</code></td></tr><tr><td style="text-align:left;">+</td><td>表示前面的字符至少匹配1次或多次。最少一次</td><td style="text-align:left;"><code>co+ result:co coo</code></td></tr><tr><td style="text-align:left;">*</td><td>可以匹配0个或者多个字符。可有可无</td><td style="text-align:left;"><code>co* result:c cooo</code></td></tr><tr><td style="text-align:left;">{m}</td><td>前一字符出现m次</td><td style="text-align:left;"><code>co{1} result: co</code></td></tr><tr><td style="text-align:left;">{m,}</td><td>前一字符出现至少m次</td><td style="text-align:left;"><code>co{1,} result: cod cood </code></td></tr><tr><td style="text-align:left;">{m,n}</td><td>前一字符出现m-n次</td><td style="text-align:left;"><code>co{1,3} result: cod cood coood </code></td></tr></tbody></table><h3 id="边界符" tabindex="-1">边界符 <a class="header-anchor" href="#边界符" aria-label="Permalink to &quot;边界符&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">符号</th><th>作用</th><th style="text-align:right;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">^</td><td>以什么开头</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">$</td><td>以什么结束</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">\\b</td><td>以什么作为边界,单词和空格之间的边界</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">\\B</td><td>以什么作为非边界</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">\\A</td><td>匹配字符串的开头位置</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">\\Z</td><td>匹配字符串的结束位置</td><td style="text-align:right;"></td></tr></tbody></table><p>中文 [\\u4e00-\\u9fa5]</p><h3 id="分组" tabindex="-1">分组 <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">符号</th><th>作用</th><th style="text-align:right;">例子</th></tr></thead><tbody><tr><td style="text-align:left;"><code>(｜)</code></td><td>匹配左右任意一个表达式</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(re)</code></td><td>括号内的表达式，表示一个组</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(?:re)</code></td><td>括号内的表达式，不表示一个组</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(?P&lt;name&gt;)</code></td><td>分组起别名 括号内的表达式，不表示一个组</td><td style="text-align:right;"><code> (?P&lt;first&gt;)</code></td></tr><tr><td style="text-align:left;"><code>(?=re)</code></td><td>向前肯定断言</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(?!re)</code></td><td>向前否定断言</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(?&lt;=re)</code></td><td>向后肯定断言</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;"><code>(?&lt;!re)</code></td><td>向前否定断言</td><td style="text-align:right;"></td></tr></tbody></table><h2 id="懒惰匹配" tabindex="-1">懒惰匹配 <a class="header-anchor" href="#懒惰匹配" aria-label="Permalink to &quot;懒惰匹配&quot;">​</a></h2><p>当我们想要匹配文本中的HTML时我们会写下如下正则表达式。&lt;.+&gt;</p><h2 id="贪婪匹配" tabindex="-1">贪婪匹配 <a class="header-anchor" href="#贪婪匹配" aria-label="Permalink to &quot;贪婪匹配&quot;">​</a></h2><p>&lt;.+?&gt;</p><h2 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h2><p>replace这个api主要用于替换数据，多用于字符串的处理和转义。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var str = &#39;贾维斯：您今天共产生了8个BUG&#39;</span></span>
<span class="line"><span>var reg = /\\w{3}/g</span></span>
<span class="line"><span>console.log(str.replace(reg,&quot;Beautiful Code&quot;))</span></span>
<span class="line"><span>// 贾维斯：您今天共产生了8个Beautiful Code</span></span></code></pre></div><h3 id="什么是-1-2" tabindex="-1">什么是 $1 $2 <a class="header-anchor" href="#什么是-1-2" aria-label="Permalink to &quot;什么是 $1 $2&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let str = &quot;前端1组-开发部&quot;;</span></span>
<span class="line"><span>console.log(str.replace(/(.{4})-(.{3})/, &quot;$2 $1&quot;));</span></span>
<span class="line"><span>// 开发部 前端1组</span></span></code></pre></div><h2 id="split" tabindex="-1">split <a class="header-anchor" href="#split" aria-label="Permalink to &quot;split&quot;">​</a></h2><p>split主要用于来切分字符串为数组，它的第一个参数也可以为正则的形式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const str1 = &#39;2022-04-21&#39;</span></span>
<span class="line"><span>const str2 = &#39;2022.04.22&#39;</span></span>
<span class="line"><span>const str3 = &#39;2022/04/23&#39;</span></span>
<span class="line"><span>const regsSplit = /[\\.\\-\\/]/</span></span>
<span class="line"><span>console.log(str1.split(regsSplit))</span></span>
<span class="line"><span>console.log(str2.split(regsSplit))</span></span>
<span class="line"><span>console.log(str3.split(regsSplit))</span></span>
<span class="line"><span>// [&#39;2022&#39;, &#39;04&#39;, &#39;21&#39;]</span></span>
<span class="line"><span>// [&#39;2022&#39;, &#39;04&#39;, &#39;22&#39;]</span></span>
<span class="line"><span>// [&#39;2022&#39;, &#39;04&#39;, &#39;23&#39;]</span></span></code></pre></div>`,32),d=[n];function i(o,p,r,c,h,g){return e(),a("div",null,d)}const x=t(l,[["render",i]]);export{b as __pageData,x as default};
